#!/usr/bin/env bash

version="05-2018_0.1.7"
jrubyjar_link=http://central.maven.org/maven2/org/jruby/jruby-complete/1.7.9/jruby-complete-1.7.9.jar

function showHelp(){
    echo 'Example : jrp [method [arg]]'
    echo ''
    echo '   -v, --version to see the version'
    echo ''
    echo 'Methods: '
    echo '   new [project Name]        :Create New Project'
    echo '   new -lgdx [project Name]  :Create New LibGDX project'
    echo '  *Inside project folder*     '
    echo '   run                       :Run Project'
    echo '   dist,dist [output]        :compiles into a final jar[CLASS]'
    echo '   dist:rb, dist:rb [output] :compiles into a final boostrap jar[RB]'
    echo ' Additionals'
    echo '  jrp run [-w [folder]] [-l]'
    echo '     example -w: `jrp run -w assets` will run inside the folder assets'
    echo '     so can access the files inside her without need to run dist'
    echo '     only supports 1 level folder yet'
    echo ''
    echo '     example -l: `jrp run -l` or `jrp run -w folder -l` will leave'
    echo '     the resultant runner file in  last/runner.rb'
    echo '     this will help you fix errors.'
    return 0
}

function getMainClass(){
    returned=`grep 'Main-Class:' ./jrp.p | cut -d: -f2 | cut -d ' ' -f2`
}
function getValue(){
    returned=`grep $1 ./jrp.p | cut -d: -f2 | cut -d ' ' -f2`
}
function getClassPath(){
    returned=""
    if [ -d libs ];then
        returned=`ls ./libs/*.jar | sed -z 's/\n/:/g' \
            | sed 's/:$//'`
    else
        returned=`ls ../libs/*.jar | sed -z 's/\n/:/g' \
            | sed 's/:$//'`
    fi
}
function check_if_is_jrp(){
    if [ ! -f ./jrp.p ];then echo "Not a JRP project.";exit;fi
}
function file_not_found(){
    echo "BUILD FAILED - FILE NOT FOUND - '$main_class'"
    exit
}
if [ $1 ];then
    if [[ ( $1 == '-v' || $1 == '--version' ) ]]; then
        echo $version
        exit
    fi
    case $1 in
    'new')
        # Create structure Folder and files
        if [ $2 ];then
            isLibGDX="no"
            if [ $2 == "-lgdx" ];then
                if [ $3 ];then
                    projectName=$3
                    isLibGDX="yes"
                else
                    echo "Project Name not specified!"
                    exit
                fi

            else
                #Assume that the second argument is the project name
                projectName=$2
            fi

            # Create Project
            mkdir $projectName
            cd ./$projectName
            mkdir src libs
            touch ./src/$projectName.rb
            echo "Downloading jruby library"
            wget -nv --show-progress -O ./libs/jruby.jar $jrubyjar_link
            echo "Main-Class: $projectName" > ./jrp.p

            if [ $isLibGDX == "yes" ];then
                # Create Libgdx Structure
                mkdir assets
                hoster="https://libgdx.badlogicgames.com/nightlies/dist"

                # Download libgdx dependencies for desktop dev
                echo "Downloading LibGDX dependencies"
                wget -nv --show-progress -P libs $hoster/gdx.jar
                wget -nv --show-progress -P libs $hoster/gdx-natives.jar
                wget -nv --show-progress -P libs $hoster/gdx-backend-lwjgl.jar
                wget -nv --show-progress -P libs $hoster/gdx-backend-lwjgl-natives.jar

                wget -nv --show-progress -O ./assets/badlogic.jpg http://i.imgur.com/joJOP1R.jpg



                cat <<EOF > ./src/$projectName.rb
java_import com.badlogic.gdx.ApplicationAdapter
java_import com.badlogic.gdx.Gdx
java_import com.badlogic.gdx.graphics.GL20
java_import com.badlogic.gdx.graphics.Texture
java_import com.badlogic.gdx.graphics.g2d.SpriteBatch

# This is an auto generated file.
#
# * DO NOT ADD 'REQUIRE' calls. All ruby files will be one.

class $projectName < ApplicationAdapter
    def create
        @batch = SpriteBatch.new()
        @img = Texture.new("badlogic.jpg")
    end

    def render
        Gdx.gl.glClearColor(1, 0, 0, 1)
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT)
        @batch.begin()
        @batch.draw(@img, 0, 0)
        @batch.end()
    end

    def dispose
        @batch.dispose()
    end
end

EOF

                cat <<EOF > ./src/desktopLauncher.rb
java_import com.badlogic.gdx.backends.lwjgl.LwjglApplication
java_import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration

config = LwjglApplicationConfiguration.new()
LwjglApplication.new($projectName.new(), config)
EOF

                echo "Main-Class: desktopLauncher" > ./jrp.p
                echo "Project-Type: LibGDX" >> ./jrp.p
            else
                echo "Project-Type: project" >> ./jrp.p
            fi

            cd ..
            echo Project setup finished successfully.
        else
            echo "Project Name not specified!"
            exit
        fi
        ;;
    'run')
        # Run as ruby file
        check_if_is_jrp

        current=`pwd`

        folder_name='./.run'
	past=false
        if [ $2 ];then
	        if [ $2 == "-w" ];then
		        if  [ $3 ];then
                folder_name=$3
		        fi
		else 
			if [ $2 == "-l" ];then
				runned=true
				echo "-> runned file will be in last/runner.rb"
			fi
	       fi
	fi
	if [ $4 ];then
		if [ $4 == "-l" ];then
		    runned=true
		    echo "-> runned file will be in last/runner.rb"
		fi
	fi
  	    getMainClass;main_class=$returned

  	    [ ! $folder_name == './.run' ] || mkdir ./.run

  	    runner_file=`openssl rand -hex 12`
  	    runner_file=$runner_file.rb

  	    way="$folder_name/$runner_file"
        [ ! -f ./src/imports.rb ] || cat ./src/imports.rb >> $way
        for i in `ls -1 ./src/*.rb`;do
	    if [[ ( $i != ./src/$main_class.rb && $i != ./src/imports.rb ) ]];then
                cat $i >> $way
            fi
        done

        # Finally add the last and most important
        cat ./src/$main_class.rb >> $way



        cd $folder_name

  	    # Only supports .. yet, not ../../../
  	    # Because would need to compute the number of each '/' in the new path
  	    # passed to '-w' option
	if [ "$runned" = true ];then
		[ -d ../last ] || mkdir ../last
		cp $runner_file ../last/runner.rb
	fi
  	    getClassPath;jruby -J-cp $returned $runner_file
	
	rm $runner_file
        
	# project path
        cd $current
        [ ! -d .run ] || rm -r .run
	

        exit
        ;;
    'dist')
        # Distribute as final jar
        check_if_is_jrp
        
        
        getMainClass;main_class=$returned
        
	    [ -f ./src/$main_class.rb ] || file_not_found
        
        [ -d ./build ] || mkdir build
        [ -d ./build/classes ] || mkdir ./build/classes

        [ -d com ] || mkdir com

        # Get Output File name
        if [ $2 ];then
            output=$2
        else
            output=$main_class
        fi
        [ ! -f $output.jar ] || rm $output.jar

        # before every thing
        [ ! -f ./src/imports.rb ] || cat ./src/imports.rb >> ./com/$main_class.rb

        for i in `ls -1 ./src/*.rb`;do
            if [[ ( $i != ./src/$main_class.rb && $i != ./src/imports.rb ) ]];then
                cat $i >> ./com/$main_class.rb
            fi
        done
        # Finally add the last and most important
        cat ./src/$main_class.rb >> ./com/$main_class.rb

        getClassPath
        jrubyc -t './build/classes/' -J-Djruby.jit.enabled=true -c $returned ./com/$main_class.rb

        [ -d ./META-INF ] || mkdir ./META-INF
        echo 'Manifest-Version: 1.0' > ./META-INF/MANIFEST.MF

        echo "Main-Class: com.$main_class" >> ./META-INF/MANIFEST.MF

        # Extract libs into tmp folder
        mkdir ./libs/.tmp
        cd ./libs/.tmp

        echo "Extracting libraries"

        for i in `ls -1 ../*.jar | tr '\n' ' '`;do
            jar xf $i
        done

        echo "Adding libraries to final jar"

        file-roller --add-to=../../$output.jar ./*

        cd ../../
        rm -r ./libs/.tmp

        file-roller --add-to=$output.jar ./META-INF
        getValue "Project-Type";projType=$returned
        if [ $returned == "LibGDX" ];then
            file-roller --add-to=$output.jar ./assets/*
        fi

        cd ./build/classes/
	echo "Main-Class: $main_class"
        #file-roller --add-to=../../../$output.jar ./com/$main_class.class
	jar uvf ../../$output.jar com/$main_class.class
        cd ../../
        rm -r ./META-INF
        rm -r com
        echo ""
        echo BUILD SUCCESSFUL
        exit
        ;;
    '--help')
        # Show Help
        showHelp
        exit
        ;;
    'dist:rb')
        # Distribute with ruby as bootstrap file
        check_if_is_jrp
        getMainClass;main_class=$returned

        # Get Output File name
        if [ $2 ];then
            output=$2
        else
            output=$main_class
        fi

        [ ! -f $output.jar ] || rm $output.jar

        cp ./libs/jruby.jar ./$output.jar


        # Extract libs into tmp folder
        mkdir ./libs/.tmp
        cd ./libs/.tmp

        echo "Extracting libraries"

        for i in `ls -1 ../*.jar | tr '\n' ' '`;do
            if [ $i != ../jruby.jar ];then
                jar xf $i
            fi
        done

        echo "Adding libraries to final jar"

        file-roller --add-to=../../$output.jar ./*

        cd ../../
        rm -r ./libs/.tmp

        # before every thing
        [ ! -f ./src/imports.rb ] || cat ./src/imports.rb >> ./jar-bootstrap.rb

        for i in `ls -1 ./src/*.rb`;do
            if [[ ( $i != ./src/$main_class.rb && $i != ./src/imports.rb ) ]];then
                cat $i >> ./jar-bootstrap.rb
            fi
        done

        # Finally add the last and most important
        cat ./src/$main_class.rb >> ./jar-bootstrap.rb

        getValue "Project-Type";projType=$returned
        if [ $returned == "LibGDX" ];then
            file-roller --add-to=$output.jar ./assets/*
        fi

        jar ufe $output.jar org.jruby.JarBootstrapMain jar-bootstrap.rb

        rm jar-bootstrap.rb

        echo ""
        echo BUILD SUCCESSFUL
        exit
        ;;
    *)
        # Else
        echo Unreconized Option \'$1\'
        showHelp
        exit
        ;;
    esac
else
    echo 'No Option Specified'
    showHelp
    exit
fi
